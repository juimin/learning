print(commit$commit.message)
}
for(commit in nrow(commits)){
print(commit)
}
for(commit in commits){
print(commit)
}
for(commit in commits){
print(commit$commit_message)
}
commits$
a
commits$commit
most_popular_url <- paste(repo_url, user, most_popular, 'commits', sep="/")
most_popular_url
commits <- fromJSON(most_popular_url)
View(commits)
for(commit in commits$commit.message){
print(commit)
}
commits$commit.message
commits$commit
View(commits)
View(commits$commit.message)
commits
is.data.frame(commits)
commits[1]
commits[1,]
for(commit in length(commits)){
print(commits[i,]$commit.message)
}
commits[1]
commits[1,]
commits[1,]$sha
commits[1,]$commit
commits[1,]$commit$message
for(commit in length(commits)){
print(commits[i,]$commit$message)
}
commits[i,]$commit$message
i
length(commits)
commits
for(commit in nrow(commits)){
print(commits[i,]$commit$message)
}
i
nrow(commits)
for(i in nrow(commits)){
print(commits[i,]$commit$message)
}
for(i in nrow(commits)){
print(i)
print(commits[i,]$commit$message)
}
for(i in 1:nrow(commits)){
print(i)
print(commits[i,]$commit$message)
}
for(i in 1:nrow(commits)){
print(commits[i,]$commit$message)
}
library(knitr)
```{r kable}
n <- 100
x <- rnorm(n)
y <- 2*x + rnorm(n)
out <- lm(y ~ x)
library(knitr)
kable(summary(out)$coef, digits=2)
```
summary(out)$coef
is.data.frame(summary(out)$coef)
kable??
sd
??kable
is.data.frame(repos)
kable(repos)
View(repos)
data.frame(repos$name, repos$description)
cbind(repos$name, repos$description)
kable(cbind(repos$name, repos$description))
cbind(repos$name, repos$description, cnames=c('name', 'description'))
repos <- fromJSON(userData$repos_url)
View(repos)
repos <- fromJSON(paste(userData$repos_url, '?per-page=100', sep='')
)
View(repos)
repos <- fromJSON(paste(userData$repos_url, '?per_page=100', sep=''))
View(repos)
repos <- fromJSON(paste(userData$repos_url, '?per_page=200', sep=''))
View(repos)
repos <- fromJSON(paste(userData$repos_url, '?per_page=200&sort=created&direction=desc', sep=''))
View(repos)
repos$created_date <- format(repos$created_at, format="%B %d %Y")
View(repos$created_date)
repos$created_date
format("2014-07-17T08:23:24Z", format="%B %d %Y")
format(as.date("2014-07-17T08:23:24Z"), format="%B %d %Y")
repos$created_date <- format(as.Date(repos$created_at), format="%B %d %Y")
repos$created_date
---
title: "GitHub Report"
output: html_document
---
```{r eval=TRUE, echo=FALSE}
# Load the jsonlite library -- install it if you haven't used it before
# install.packages('jsonlite')
library(jsonlite)
library(knitr)
# Set the user you're interested in
user <- 'mkfreeman'
# Using the fromJSON command, get the information about your user from the GitHub API
userData <- fromJSON("https://api.github.com/users/mkfreeman")
# Get information about the user's repositories (the URL you need should have been returned to you)
repos <- fromJSON(paste(userData$repos_url, '?per_page=200&sort=created&direction=desc', sep=''))
# Get the number of repos the user has
num_repos <- nrow(repos)
# Get the repo with the most number of forks as the most popular
most_popular <- repos$name[repos$forks == max(repos$forks)]
```
This is a report about GitHub user with username `r user`.  Here's the image avatar the user has chosen:
---
![`r user`](`r userData$avatar_url`)
---
This user has `r num_repos` repositories, of which `r most_popular` is the most popular given that it has `r max(repos$forks)` forks. Let's dig a bit deeper into that most popular repository.
```{r eval=TRUE, echo=FALSE}
# Get the commit history
repo_url <- "https://api.github.com/repos"
most_popular_url <- paste(repo_url, user, most_popular, 'commits', sep="/")
commits <- fromJSON(most_popular_url)
repos$created_date <- format(as.Date(repos$created_at), format="%B %d %Y")
table <- data.frame(repos$name, repos$description, repos$created_date)
names(table) <- c('Name', 'Description', 'Created')
```
```{r echo=FALSE}
kable(table)
```
library(jsonlite)
library(knitr)
# Set the user you're interested in
user <- 'mkfreeman'
# Using the fromJSON command, get the information about your user from the GitHub API
userData <- fromJSON("https://api.github.com/users/mkfreeman")
products <- c('7600 Series Routers',
'7200 Series Routers',
'Lumin Optical Transmission Platform',
'Line Equalizers',
'Blade Switches for Dell',
'Catalyst 4500 Series Switches')
categories <- rep(c('router', 'video', 'switch'), 2)
categories
categories <- rep(c('router', 'video', 'switch'),each= 2)
categories
products <- data.frame(products, categories)
products
purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'))
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'),
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
purchasers
purchasers <- rep(purchasers, each=2)
purchasers
purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'),
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
purchasers <- rbind(purchasers, purchasers)
purchasers
d <- data.frame(a = c(1,2,3),b = c(1,2,3))
n <- 3
d
n
do.call("rbind", replicate(n, d, simplify = FALSE))
d
d[rep(seq_len(nrow(d)), n), ]
purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'),
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
# Duplicate length to match length of products
purchasers <- do.call("rbind", replicate(2, purchasers, simplify = FALSE))
purchasers
purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'),
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
# Duplicate length to match length of products
purchasers <- do.call("rbind", replicate(2, purchasers, simplify = TRUE))
purchasers
purchasers <- data.frame(
name=c('Kent Electronics', 'Silver Soluations', 'Davis Systems'),
city=c('Boston', 'New York City', 'Denver'),
lat=c(42.3601, 40.7127, 39.7392),
lng=c(-71.0589, -74.0059, -104.9903)
)
# Duplicate length to match length of products
purchasers <- do.call("rbind", replicate(purchasers, each=6, simplify = TRUE))
purchasers
replicate(purchasers, each=6, simplify = TRUE)
# Purchasers
purchasers <- data.frame(
name=rep(c('Kent Electronics', 'Silver Soluations', 'Davis Systems'), each=6),
city=rep(c('Boston', 'New York City', 'Denver'), each=6),
lat=rep(c(42.3601, 40.7127, 39.7392), each=6),
lng=rep(c((-71.0589, -74.0059, -104.9903), each=6)
)
purchasers <- data.frame(
name=rep(c('Kent Electronics', 'Silver Soluations', 'Davis Systems'), each=6),
city=rep(c('Boston', 'New York City', 'Denver'), each=6),
lat=rep(c(42.3601, 40.7127, 39.7392), each=6),
lng=rep(c(-71.0589, -74.0059, -104.9903), each=6)
)
purchasers
rnorm(1, base_price, 2)
base_price <- c(100, 200, 125, 150, 400, 500)
rnorm(1, base_price, 2)
rnorm(10, base_price, 2)
rnorm(length(base_price), base_price, 2)
purchasers
purchasers[19,]
mydf <- data.frame(col1=c(1, 2, 3, 4),
col2 = c(5, 6, 7, 8),
col3 = c("a", "b", "c", "d"), stringsAsFactors  = FALSE)
mydf
index <- rep(seq_len(nrow(mydf)), each = 3)
index
mydf[index, ]
4 * 6 * 3
items <- c('7600 Series Routers',
'7200 Series Routers',
'Lumin Optical Transmission Platform',
'Line Equalizers',
'Blade Switches for Dell',
'Catalyst 4500 Series Switches')
items <- rep(items, each=12)
# Item categories
categories <- rep(c('router', 'video', 'switch'),each= 24)
# Prices
base_price <- c(100, 200, 125, 150, 400, 500)
prices <- rnorm(72, base_price, 15)
quarters <- rep(c('q1', 'q2', 'q3', 'q4'), each=18)
quarters
index <- rep(seq_len(nrow(purchasers)), 12)
index <- rep(seq_len(nrow(purchasers)), 12)
purchasers[index, ]
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
rm(list=ls())
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
version(plotly)
version
packageVersion(plotly)
packageVersion('plotly')
packageVersion('ggplot')
packageVersion('ggplot2')
rm(list=ls())
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
install.packages("devtools")
library(devtools)
install_github("plotly", "ropensci")
rm(list=ls())
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
library(plotly)
install.packages('plotly')
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
library(plotly)
install.packages('plotly')
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
data <- c(3,5,2,1,6)
total <- sum(data)
total
print(total)
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "gates_data" using the "read.csv" function
gates_data <- read.csv('data/gates_money.csv')
class(gates_data)
names(gates_data)
gates_data$total_amount
class(gates_data$total_amount)
mode(gates_data$total_amount)
typeof(gates_data$total_amount)
is.vector(gates_data$total_amount)
levels(spending)
spending
gates_data$start_year
gates_data
View(gates_data)
View(gates_data)
duplicated(gates_data$organization)
unique(gates_data$organization)
#### Section 1 ####
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "gates_data" using the "read.csv" function
gates_data <- read.csv('data/gates_money.csv')
# Use the View function to look at your data
View(gates_data)
# Create a variable "spending" as the "total_amount" column of the dataset
spending <- gates_data$total_amount
# Confirm that your "spending" variable is a vector using the "is.vector" function
is.vector(spending)
# Create a variable "title" as the "grant_title" column of the dataset
title <- gates_data$grant_title
### Now you can ask some more interesting questions about the dataset ###
# Create a variable "mean_spending" that is the mean of your spending variable
mean_spending <- mean(spending)
# Create a variable "highest_amount" that is the maximum grant size
highest_amount <- max(spending)
# Create a variable "lowest_amount" that is the minimum grant size
lowest_amount <- min(spending)
title[spending == highest_amount]
title
is.vector(title)
is.factor(title)
as.vector(title)
title[spending == lowest_amount]
title <- as.vector(gates_data$grant_title)
title[spending == lowest_amount]
#### Section 1 ####
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "gates_data" using the "read.csv" function
gates_data <- read.csv('data/gates_money.csv')
# Use the View function to look at your data
View(gates_data)
# Create a variable "spending" as the "total_amount" column of the dataset
spending <- gates_data$total_amount
# Confirm that your "spending" variable is a vector using the "is.vector" function
is.vector(spending)
# Create a variable "org" as the "organization" column of the dataset
org <- as.vector(gates_data$organization)
### Now you can ask some more interesting questions about the dataset.  Store your answers in variables ###
# What was the mean grant value?
mean_spending <- mean(spending)
# What was the dollar amount of the largest grant?
highest_amount <- max(spending)
# What was the dollar amount of the smallest grant?
lowest_amount <- min(spending)
# Which organization received the largest grant?
largest_recipient <- org[spending == largest_amount]
# Which organization received the smallest grant?
smallest_recipient <- org[spending == lowest_amount]
#### Section 2 ####
largest_recipient <- org[spending == highest_amount]
largest_recipient
plot(spending)
spending
hist(spending)
plot(log(spending)
)
plot(log(spending))
spending
gates_data <- read.csv('data/gates_money.csv')
gates_data$total_amount
View(gates_data)
length(grants[grants$year == 2010])
#### Section 1 ####
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read data into a variable called "grants" using the "read.csv" function
grants <- read.csv('data/gates_money.csv')
# Use the View function to look at your data
View(grants)
# Create a variable "spending" as the "total_amount" column of the dataset
spending <- grants$total_amount
# Confirm that your "spending" variable is a vector using the "is.vector" function
is.vector(spending)
# Create a variable "org" as the "organization" column of the dataset
org <- as.vector(grants$organization)
### Now you can ask some more interesting questions about the dataset.  Store your answers in variables ###
# What was the mean grant value?
mean_spending <- mean(spending)
# What was the dollar amount of the largest grant?
highest_amount <- max(spending)
# What was the dollar amount of the smallest grant?
lowest_amount <- min(spending)
# Which organization received the largest grant?
largest_recipient <- org[spending == highest_amount]
# Which organization received the smallest grant?
smallest_recipient <- org[spending == lowest_amount]
# How many grants were awarded in 2010?
length(grants[grants$year == 2010])
length(grants[grants$start_year == 2010])
length(spending[grants$start_year == 2010])
length(spending[grants$start_year == 2009])
length(spending[grants$start_year == 2008])
org
?lapply
?count
?duplicated
as.data.frame(lowest_amount, highest_amount)
as.data.frame(c(lowest_amount, highest_amount)
)
as.data.frame(lowest_amount, highest_amount)
as.data.frame.vector(lowest_amount, highess)
as.data.frame.vector(lowest_amount, highest_amount)
as.data.frame.vector(lowest_amount, highest_amount, largest_recipient)
View(bnames)
library(reportsWS)
View(bnames)
write.csv(bnames, 'baby_names.csv')
max(bnames$year)
bnames[bnames$year == 2013]
### Exercise 2 ###
# Using the "setwd" function, set your working directory as the directory of your repository
setwd('~/Documents/INFO-498F/lecture-5-exercises')
# Read in your baby names csv file into a variable called "bnames"
bnames <- read.csv('baby_names.csv')
# Create a vector "year" as the year column of the dataset
year <- bnames$year
# Create a vector "names" as the name column of your dataset
# As in the last exercise, you'll need to convert this column to a vector
names <- as.vector(bnames$name)
year[proportions == max(proportions[name == "Michael"])]
year <- bnames$year
# Create a vector "name" as the name column of your dataset
# As in the last exercise, you'll need to convert this column to a vector
name <- as.vector(bnames$name)
# Create a vector "proportion" as the prop column of the datset
proportion <- bnames$prop
### Answer the following questions about your dataset ###
# In which year was your name most popular?
year[proportions == max(proportion[name == "Michael"])]
year[proportion == max(proportion[name == "Michael"])]
proportion[name == 'Michael' && year == '2013']
name == 'Michael' && year == '2013'
name
name == 'Michael'
name <- as.vector(bnames$name[bnames$year == 2013])
names(bnames)
name <- as.vector(bnames$name[bnames$year == 2013 && bnames$sex == 'M'])
name
bnames$sex
bnames$year == 2013 && bnames$sex == 'M'
bnames[,bnames$sex=='F']
bnames[bnames$sex=='F',]
bnames[bnames$sex=='F',c('name', 'prop', 'year')],
bnames[bnames$sex=='F',c('name', 'prop', 'year')]
View(bnames[bnames$sex=='F',c('name', 'prop', 'year')])
write.csv(bnames[bnames$sex=='F',c('name', 'prop', 'year')], 'female_names.csv')
write.csv(bnames[bnames$sex=='M',c('name', 'prop', 'year')], 'male_names.csv')
female_names <- read.csv('female_names.csv')
female_names <- read.csv('data/female_names.csv')
year <- bnames$year
# Create a vector "name" as the name column of the datset
name <- female_names$name
# Create a vector "prop" as the proportion column of the dataset
prop <- female_names$prop
# As in the last exercise, you'll need to convert this column to a vector
name <- as.vector(female_names$name)
# Create a vector "prop" as the proportion column of the dataset
prop <- female_names$prop
# Create a vector "names_2013" as the name column of your dataset where the year is 2013
names_2013 <- name[year == 2013]
# Create a vector "prop_2013" as the prop column of the datset in 2013
proportion_2013 <- prop[year==2013]
most_pop <- names_2013[proportion_2013 == max(proportion_2013)]
most_pop
proportion_2013 == max(proportion_2013)
prop <- female_names$prop
prop
year
prop[year == 2013]
year == 2013
prop[year == 2013]
is.vector(year)
is.vector(prop)
length(year)
length(prop)
year <- female_names$year
prop <- female_names$prop
names_2013 <- name[year == 2013]
